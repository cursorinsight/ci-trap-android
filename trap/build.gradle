plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
    id 'org.jetbrains.dokka'
    id 'jacoco'
    id 'signing'
}

def libraryVersion = System.getenv("GITHUB_REF_NAME") ?: "1.0"

group 'com.cursorinsight.trap'
version libraryVersion

ext["signing.key"] = System.getenv("SIGNING_KEY")
ext["signing.keyId"] = System.getenv("SIGNING_KEY_ID")
ext["signing.password"] = System.getenv("SIGNING_PASSWORD")
ext.ossrhUsername = System.getenv("OSSRH_USERNAME")
ext.ossrhPassword = System.getenv("OSSRH_PASSWORD")

def localProperties = new Properties()
def secretPropsFile = rootProject.file("local.properties")
if (secretPropsFile.exists()) {
    localProperties.load(new FileInputStream(secretPropsFile))
    ext["signing.key"] = localProperties.getProperty("signing.key", ext["signing.key"])
    ext["signing.keyId"] = localProperties.getProperty("signing.keyId", ext["signing.keyId"])
    ext["signing.password"] = localProperties.getProperty("signing.password", ext["signing.password"])
    ext.ossrhUsername = localProperties.getProperty("ossrhUsername", ext.ossrhUsername)
    ext.ossrhPassword = localProperties.getProperty("ossrhPassword", ext.ossrhPassword)
}

kotlin {
    android {
        namespace 'com.cursorinsight.trap'
        compileSdk 33

        defaultConfig {
            minSdk 24
            //noinspection OldTargetApi
            targetSdk 33

            aarMetadata {
                minCompileSdk 29
            }
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        kotlinOptions {
            jvmTarget = '1.8'
        }

        buildFeatures {
            buildConfig = true
        }

        buildTypes {
            debug {
                testCoverageEnabled true
            }
            release { }
        }

        testOptions {
            unitTests.all {
                useJUnitPlatform()
            }
        }

        tasks.named("dokkaHtml") {
            suppressInheritedMembers = true
            //noinspection GrDeprecatedAPIUsage
            outputDirectory.set(buildDir.toPath().resolve("../../public").toFile())
        }

        publishing {
            singleVariant('release') {

            }
        }
    }
}

jacoco {
    toolVersion = "0.8.10"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses true
    jacoco.excludes = ['jdk.internal.*']
    finalizedBy jacocoUnitTestReport
}

tasks.register('jacocoUnitTestReport', JacocoReport) {
    dependsOn['testDebugUnitTest']

    reports {
        csv.required = false
        html.required = false
        xml.required = true
    }

    // Add files that should not be listed in the report (e.g. generated Files from dagger)
    def fileFilter = []

    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)

    def mainSrc = "$projectDir/src/main/java"
    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([kotlinDebugTree])

    // Make sure the path is correct (if not run the unit tests and try find the .exec file that is generated after the unit tests are finished should be similar to that one)
    executionData.from = fileTree(dir: "$buildDir", includes: ["outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec"])
}

publishing {
    publications {
        release(MavenPublication) {
            groupId = 'com.cursorinsight'
            artifactId = 'trap'
            version = libraryVersion

            afterEvaluate {
                from components.release
            }

            pom {
                name = "Trap Library for Android"
                description = "Touch and sensor data collector Android library for the Cursor Insight trap server."
                url = "https://github.com/cursorinsight/ci-trap-android"

                licenses {
                    license {
                        name = "MIT"
                        url = "https://opensource.org/licenses/MIT"
                    }
                }
                developers {
                    developer {
                        id = "mtolmacs"
                        name = "Mark Tolmacs"
                        email = "mark@lazycat.hu"
                    }
                    developer {
                        id = "gbence"
                        name = "Bence Golda"
                        email = "bence@cursorinsight.com"
                    }
                    developer {
                        id = "denessapi"
                        name = "Denes Sapi"
                        email = "denes@cursorinsight.com"
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/cursorinsight/ci-trap-android.git'
                    developerConnection = 'scm:git:ssh://github.com/cursorinsight/ci-trap-android.git'
                    url = "https://github.com/cursorinsight/ci-trap-android"
                }
            }
        }
    }

    repositories {
        maven {
            name = "sonatype"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = findProperty("ossrhUsername")
                password = findProperty("ossrhPassword")
            }
        }
    }
}

signing {
    def rawSigningKeyId = findProperty("signing.keyId")
    def signingKey = findProperty("signing.key") 
    def signingPassword = findProperty("signing.password") 
    def signingKeyId = rawSigningKeyId?.length() > 8 ? rawSigningKeyId.substring(rawSigningKeyId?.length() - 8) : rawSigningKeyId
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign(publishing.publications)
}

dependencies {
    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'org.java-websocket:Java-WebSocket:1.5.4'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'com.google.android.gms:play-services-location:21.0.1'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    testImplementation 'org.mockito:mockito-core:5.3.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.3.1'
    testImplementation 'io.mockk:mockk:1.13.7'
    testImplementation 'org.json:json:20230618'
    androidTestImplementation 'io.mockk:mockk-android:1.13.7'
    testImplementation 'org.awaitility:awaitility-kotlin:4.2.0'

    //noinspection GradleDynamicVersion
    dokkaPlugin 'org.jetbrains.dokka:android-documentation-plugin:1.9.0'
}
